#!groovy
// sharelibrary
@Library('jenkinslib') _
def build = new org.devops.build()
def deploy = new org.devops.deploy()
def tools = new org.devops.tools()
def gitlab = new org.devops.gitlab()
def toemail = new org.devops.toemail()
def sonar = new org.devops.sonarqube()
def sonarapi = new org.devops.sonarapi()
// env
String buildShell = "${env.buildShell}"
String buildType = "${env.buildType}"
String deployHosts = "${env.deployHosts}"
String srcUrl = "${env.srcUrl}"
String branchName = "${env.branchName}"
String gitServer = "${env.gitServer}"
String sonarServer = "${env.sonarServer}"
if("${runOpts}" == "GitlabPush") {
  branchName = branch - "refs/heads/"
  currentBuild.description = "Trigger by ${userName} ${branch}"
  gitlab.ChangeCommitStatus(gitServer,projectId,commitSha,"running")
}
pipeline {
  agent { 
    node { 
      label "master"
    }
  }
   
  stages {
    stage("CheckOut") {
      steps {
        script {
          println("${branchName}")
          tools.PrintMes('获取代码', "green")
          // 注意要修改这里credentialsId 重新生成流水线语法
          checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[credentialsId: '0551f433-bf23-44e5-8c38-bfdd9c779154', url: "${srcUrl}"]]])
          // checkout([$class: 'GitSCM', branches: [[name: "${branchName}"]], extensions: [], userRemoteConfigs: [[credentialsId: '1bf507af-c920-41b1-beea-d3b191af9cd4', url: "${srcUrl}"]]])
        }
      }
    }
    stage("Build") {
      steps {
        script {
          tools.PrintMes('执行打包', "green")
          build.Build(buildType, buildShell)
          //deploy.AnsibleDeploy("${deployHosts}", "-m ping")
        }
      }
    }
    stage("QA") {
      steps {
        script {
          tools.PrintMes('代码扫描', "green")
          // sonar.SonarScan("${JOB_NAME}","${JOB_NAME}","src")
          sonar.SonarScanInJenkins("${JOB_NAME}","${JOB_NAME}","src")
          //tools.PrintMes('获取扫描结果', "green")
          //println("${JOB_NAME}")
          //result = sonarapi.GetProjectStatus(sonarServer,"${JOB_NAME}")
          //println(result)
          if (result.toString().contains("ERROR")) {
            error "代码质量阈超标，请及时修复"
          }
          
        }
      }
    }
  }
  post {
    always {
      script {
        println("always")
      }
    }
    success {
      script {
        println("success")
        if("${runOpts}" == "GitlabPush") {
          gitlab.ChangeCommitStatus(gitServer,projectId,commitSha,"success")
        }
        toemail.Email("流水线执行成功", userEmail)
      }
    }
    failure {
      script {
        println("failure")
        gitlab.ChangeCommitStatus(gitServer,projectId,commitSha,"failed")
        toemail.Email("流水线执行失败", userEmail)
      }
    }
    aborted {
      script {
        println("aborted")
        gitlab.ChangeCommitStatus(gitServer,projectId,commitSha,"canceled")
        toemail.Email("流水线执行取消", userEmail)
      }
    }
  }
}
